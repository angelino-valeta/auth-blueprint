version: "3.8"
services:
  app:
    build: .
    ports:
      - "3000:3000"
      - "8080:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - TS_NODE=true
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=backend_blueprint_db
      - DB_SYNC=true
      - DB_LOGGING=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_PRIVATE_KEY_PATH=/app/keys/private.pem  # Corrigido caminho
      - JWT_PUBLIC_KEY_PATH=/app/keys/public.pem    # Corrigido caminho
      - ACCESS_TOKEN_EXPIRY=15m
      - REFRESH_TOKEN_EXPIRY=7d
      - CRYPTO_KEY=${CRYPTO_KEY}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=100
      - EXTERNAL_API_URL=https://api.exemplo.com
      - EXTERNAL_API_KEY=${EXTERNAL_API_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - WEBSOCKET_PORT=8080
      - MAX_LOGIN_ATTEMPTS=5
      - LOGIN_JAIL_DURATION=900
    volumes:
      - ./keys:/app/keys
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - otel-collector
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=backend_blueprint_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d backend_blueprint_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4318:4318"  # OTLP/HTTP
      - "8889:8889"  # Prometheus
    depends_on:
      - jaeger
      - loki
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # UI do Jaeger
      - "14250:14250"  # Recebe traces
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - cadvisor
      - portainer
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"  # Porta do Loki
    command: "-config.file=/etc/loki/local-config.yaml"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - loki
      - prometheus
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"  # Interface web do Portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Comunicação com Docker
      - portainer-data:/data
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8081:8080"  # Interface web (opcional) e métricas
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

volumes:
  pgdata:
  redisdata:
  grafana-data:
  portainer-data: